
<style lang="less">
@import './vendor/weui/weui.wxss';
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import 'wepy-async-function';
import wepy from 'wepy';
import './vendor';
import { setStore } from 'wepy-redux';
import configStore from './store';

const store = configStore();
setStore(store);
export default class extends wepy.app {
  config = {
    pages: ['pages/index', 'pages/test'],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      color: '#929292',
      selectedColor: '#ff9630',
      backgroundColor: '#f7f7f8',
      borderStyle: 'white',
      list: [
        {
          pagePath: 'pages/index',
          text: '首页'
        },
        {
          pagePath: 'pages/test',
          text: '视频'
        }
      ]
    },
    networkTimeout: {
      request: 10000,
      downloadFile: 10000
    },
    debug: true
  };
  globalData = {
    userInfo: null
  };

  constructor() {
    super();
    this.use('requestfix');
    //拦截请求
    this.intercept('request', {
      config(p) {
        // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
        p = Object.assign(p, {
          url: p.baseUrl ? p.url : 'http://localhost:7001/' + p.url,
          header: p.setHeader
            ? p.setHeader
            : {
                'content-type': 'application/x-www-form-urlencoded',
                Authorization: 'Bearer ' + wepy.getStorageSync('token')
              }
        });
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p;
      },
      // 请求成功后的回调函数
      success(p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        return p;
      },
      // 请求失败后的回调函数
      fail(p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p;
      },
      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete(p) {}
    });
  }
  async onLaunch() {
    this.testAsync();
  }
  sleep(s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved');
        wepy.getLocation({
          type: 'wgs84',
          success: res => {
            console.log(res);
            var latitude = res.latitude; // 经度
            var longitude = res.longitude; // 纬度
            console.log(latitude, longitude);
          }
        });
      }, s * 1000);
    });
  }
  async testAsync() {
    const data = await this.sleep(0);
    console.log(data);
  }
  getUserInfo(cb) {
    const that = this;
    if (this.globalData.userInfo) {
      return this.globalData.userInfo;
    }
    wepy.getUserInfo({
      success(res) {
        that.globalData.userInfo = res.userInfo;
        cb && cb(res.userInfo);
      }
    });
  }
}
</script>
