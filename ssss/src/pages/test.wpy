
<template>
  <view class="section">
  <view class="section__title">省市区选择器</view>
  <!-- <picker mode="region" bindchange="bindRegionChange" value="{{region}}" custom-item="{{customItem}}">
    <view class="picker">
      当前选择：{{region[0]}}，{{region[1]}}
    </view>
  </picker> -->
  <text class="iconfont icon-yonghudianji" style="font-size:50px;color:red"></text>  
  <picker mode="multiSelector" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}" range="{{multiArray}}">
   <view class="picker">
      当前选择：{{multiArray[0][multiIndex[0]]}} > {{multiArray[1][multiIndex[1]]}}
    </view>
  </picker>
</view>
</view>
</template>

<script>
import wepy from 'wepy';

function getRandomColor() {
  let rgb = [];
  for (let i = 0; i < 3; ++i) {
    let color = Math.floor(Math.random() * 256).toString(16);
    color = color.length == 1 ? '0' + color : color;
    rgb.push(color);
  }
  return '#' + rgb.join('');
}
export default class Index extends wepy.page {
  data = {
    inputValue: '',
    region: ['广东省'],
    customItem: '全部',
    multiArray: [],
    multiIndex: [0, 0]
  };

  methods = {
    update: function(e) {
      // 视频更新
      //   console.log(e);
    },
    bindInputBlur: function(e) {
      this.inputValue = e.detail.value;
    },
    bindSendDanmu: function() {
      this.videoContext.sendDanmu({
        text: this.inputValue,
        color: getRandomColor()
      });
    },
    bindRegionChange: function(e) {
      console.log('picker发送选择改变，携带值为', e.detail.value);
      this.setData({
        region: e.detail.value
      });
    },
    bindMultiPickerColumnChange: function(e) {
      let self = this;
      self.multiIndex[e.detail.column] = e.detail.value;
      var hopspital_id_session = self.prev_city_id; // 保持之前的地区id 与新选择的id 做对比，如果改变则重新请求数据
      if (e.detail.column == 0) {
        let cityList = self.cityList;
        let _id = cityList[e.detail.value]['_id'];
        if (hopspital_id_session != _id) {
          // 与之前保持的校区id做对比，如果不一致则重新请求并赋新值
          self.gethospitals(_id);
        }
        self.multiIndex[1] = 0;
      }
      self.$apply();
    }
  };
  async gethospitals(_id) {
    let self = this;
    if (_id) {
      self.prev_city_id = _id;
    }
    await wepy.request({
      method: 'GET',
      url: 'api/app/gethospitals?_id=' + _id,
      success(e) {
        console.log(e);
        let hospitalList = e.data.data;
        let hospitalArr = [];
        hospitalList.forEach(element => {
          hospitalArr.push(element.label);
        });
        let cityArr = self.cityArr;
        self.multiArray = [cityArr, hospitalArr];
        self.hospitalList = hospitalList;
        self.hospitalArr = hospitalArr;
        self.$apply();
      }
    });
  }

  async onReady(res) {
    this.videoContext = wepy.createVideoContext('myVideo');
    this.videoContext.showStatusBar();
    let self = this;
    await wepy.request({
      url: 'api/app/getcitys',
      success(e) {
        let cityList = e.data.data;
        let cityArr = [];
        cityList.forEach(item => {
          cityArr.push(item.city);
        });
        self.multiArray = [cityArr, []];
        self.cityList = cityList;
        self.cityArr = cityArr;
        self.$apply();
        let default_city_id = cityList[0]['_id'];
        if (default_city_id) self.gethospitals(default_city_id);
      }
    });
  }
}
</script>

<style>

</style>
